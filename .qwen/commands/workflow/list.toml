description = "Lists all available workflow commands for the Wing Commander Saga to Godot migration."
prompt = """
Here are all the available workflow commands for the Wing Commander Saga to Godot migration:

**Workflow Commands:**
- `/workflow:plan` - Analyzes a user story and breaks it down into a structured plan of implementation tasks
- `/workflow:implement` - Implements the specified task by reading its markdown file and applying code changes
- `/workflow:validate` - Runs all project quality gates for the changes related to a task

**Individual Agent Commands:**
- `/agent:migration-architect` - Triggers the Migration Architect agent to create a strategic plan for the C++ to Godot migration
- `/agent:cpp-code-analyst` - Triggers the C++ Code Analyst agent to perform deep structural static analysis of the C++ codebase
- `/agent:godot-systems-designer` - Triggers the Godot Systems Designer agent to design the target architecture for the Godot project
- `/agent:gdscript-engineer` - Triggers the GDScript Engineer agent to implement the complete GDScript codebase for the game
- `/agent:asset-pipeline-engineer` - Triggers the Asset Pipeline Engineer agent to design and implement an automated asset pipeline for Godot
- `/agent:lead-developer` - Triggers the Lead Developer agent to provide oversight and technical guidance for the migration project

The workflow commands follow the Workflow Orchestration principles:
1. **Planning** - Use `/workflow:plan` to break down user stories into structured tasks
2. **Implementation** - Use `/workflow:implement` to execute tasks with appropriate agents
3. **Validation** - Use `/workflow:validate` to run quality checks and ensure code quality

Each task is tracked in the `.qwen_workflow/tasks/` directory with a markdown file that includes:
- Task metadata in YAML frontmatter
- Description and acceptance criteria
- Status tracking
- Feedback section for human review
"""